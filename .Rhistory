t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
out<-matrix(1:4,2)
rownames(out)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
out[1,1]<-mean(closeness(n))
out[1,2]<-mean(degree(n))
out[1,3]<-modularity(n, membership(cfg))
out[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
out[2,1]<-mean(closeness(n))
out[2,2]<-mean(degree(n))
out[2,3]<-modularity(n, membership(cfg))
out[2,4]<-0.9
out
}
ConnStat<-function(ps, num=){
ConnStat<-function(ps, num=100){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
out<-matrix(1:4,2)
rownames(out)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
out[1,1]<-mean(closeness(n))
out[1,2]<-mean(degree(n))
out[1,3]<-modularity(n, membership(cfg))
out[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
out[2,1]<-mean(closeness(n))
out[2,2]<-mean(degree(n))
out[2,3]<-modularity(n, membership(cfg))
out[2,4]<-0.9
out
}
ConnStat(trt$rep2$model$comm)
ConnStat<-function(ps, num=100){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
out<-matrix(1:4,2)
colnames(out)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
out[1,1]<-mean(closeness(n))
out[1,2]<-mean(degree(n))
out[1,3]<-modularity(n, membership(cfg))
out[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
out[2,1]<-mean(closeness(n))
out[2,2]<-mean(degree(n))
out[2,3]<-modularity(n, membership(cfg))
out[2,4]<-0.9
out
}
ConnStat(trt$rep2$model$comm)
ConnStat<-function(ps, num=100){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
out<-matrix(2,1:4)
colnames(out)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
out[1,1]<-mean(closeness(n))
out[1,2]<-mean(degree(n))
out[1,3]<-modularity(n, membership(cfg))
out[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
out[2,1]<-mean(closeness(n))
out[2,2]<-mean(degree(n))
out[2,3]<-modularity(n, membership(cfg))
out[2,4]<-0.9
out
}
ConnStat(trt$rep2$model$comm)
?matrix
ConnStat<-function(ps, num=100){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
out<-matrix(nrow=2,ncol=4)
colnames(out)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
out[1,1]<-mean(closeness(n))
out[1,2]<-mean(degree(n))
out[1,3]<-modularity(n, membership(cfg))
out[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
out[2,1]<-mean(closeness(n))
out[2,2]<-mean(degree(n))
out[2,3]<-modularity(n, membership(cfg))
out[2,4]<-0.9
out
}
ConnStat(trt$rep2$model$comm)
ConnStat(trt$rep2$model$comm, num=200)
ConnStat(trt$rep2$model$comm, num=50)
ConnStat(trt$rep2$model$comm, num=400)
ConnStat(trt$rep2$model$comm)
ConnStat(trt$rep2$QSeq$comm)
ConnStat(trt$rep2$deseqVST$comm)
ConnStat(trt$rep1$model$comm)
ConnStat(trt$rep1$QSeq$comm)
ConnStat(trt$rep1$deseqVST$comm)
ConnStat<-function(ps, num=100){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Dynamic", vertex.size=10)
table<-matrix(nrow=2,ncol=4)
colnames(table)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
rownames(table)<-c("Dynamic", "Static")
table[1,1]<-mean(closeness(n))
table[1,2]<-mean(degree(n))
table[1,3]<-modularity(n, membership(cfg))
table[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.9]<-0
t[t>0.9]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
table[2,1]<-mean(closeness(n))
table[2,2]<-mean(degree(n))
table[2,3]<-modularity(n, membership(cfg))
table[2,4]<-0.9
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Static", vertex.size=10)
table
}
ConnStat(trt$rep1$deseqVST$comm)
ConnStat(trt$rep1$QSeq$comm)
ConnStat(trt$rep1$model$comm)
ConnStat<-function(ps, num=200){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Dynamic", vertex.size=10)
table<-matrix(nrow=2,ncol=4)
colnames(table)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
rownames(table)<-c("Dynamic", "Static")
table[1,1]<-mean(closeness(n))
table[1,2]<-mean(degree(n))
table[1,3]<-modularity(n, membership(cfg))
table[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.8]<-0
t[t>0.8]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
table[2,1]<-mean(closeness(n))
table[2,2]<-mean(degree(n))
table[2,3]<-modularity(n, membership(cfg))
table[2,4]<-0.8
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Static", vertex.size=10)
table
}
ConnStat(trt$rep1$model$comm)
ConnStat<-function(ps, num=200){
require(phyloseq)
require(igraph)
o<-otu_table(ps)
c<-cor(o)
i=1
c[c<1]<-0
n<-graph_from_incidence_matrix(c)
while(ecount(n)<num){
t<-otu_table(ps)
t<-cor(t)
t[t<i]<-0
t[t>i]<-1
n<-graph_from_incidence_matrix(t)
i=i-0.001
}
cfg<-cluster_fast_greedy(as.undirected(n))
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Dynamic", vertex.size=10)
table<-matrix(nrow=2,ncol=4)
colnames(table)<-c("Mean_Closeness", "Mean_Degree", "Modularity", "Threshold")
rownames(table)<-c("Dynamic", "Static")
table[1,1]<-mean(closeness(n))
table[1,2]<-mean(degree(n))
table[1,3]<-modularity(n, membership(cfg))
table[1,4]<-i
t<-otu_table(ps)
t<-cor(t)
t[t<0.7]<-0
t[t>0.7]<-1
n<-graph_from_incidence_matrix(t)
cfg<-cluster_fast_greedy(as.undirected(n))
table[2,1]<-mean(closeness(n))
table[2,2]<-mean(degree(n))
table[2,3]<-modularity(n, membership(cfg))
table[2,4]<-0.7
plot(cfg, as.undirected(n), layout=layout_nicely(n), vertex.label=NA, main="Static", vertex.size=10)
table
}
ConnStat(trt$rep1$model$comm)
ConnStat(trt$rep1$QSeq$comm)
ConnStat(trt$rep1$ref$comm, num=50)
ConnStat(trt$rep1$model$comm, num=50)
ConnStat(trt$rep1$model$comm, num=100)
ConnStat(trt$rep1$model$comm, num=150)
ConnStat(trt$rep1$model$comm, num=200)
ConnStat(trt$rep1$model$comm, num=250)
ConnStat(trt$rep1$model$comm, num=350)
ConnStat(trt$rep1$model$comm, num=450)
ConnStat(trt$rep1$limmaVST$comm, num=250)
ConnStat(trt$rep1$RA$comm, num=250)
getwd()
setwd("~/Documents/GitHub/Model.Microbiome")
getwd()
document()
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
method<-c("QSeq")
model<-suppressWarnings(run.analysis2(commonN=30, groupN=20, singleN=5, D=500, V=250, method))
run.analysis2
devtools::install_github("(“djeppschmidt/Model.Microbiome”")
library(devtools)
devtools::install_github("(“djeppschmidt/Model.Microbiome”")
devtools::install_github("djeppschmidt/Model.Microbiome")
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
run.analysis2
getwd()
document()
library(Model.Microbiome)
method<-c("QSeq")
model<-suppressWarnings(run.analysis2(commonN=30, groupN=20, singleN=5, D=500, V=250, method))
library(Model.Microbiome)
model<-suppressWarnings(run.analysis2(commonN=30, groupN=20, singleN=5, D=500, V=250, method))
devtools::install_github("djeppschmidt/Model.Microbiome")
devtools::install_github("djeppschmidt/Model.Microbiome")
library(Model.Microbiome)
run.analysis2
document()
run.analysis2
#now install ####
devtools::install_github("djeppschmidt/Model.Microbiome")
# load required packages ####
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
library(car)
library(DESeq2)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
library(car)
library(DESeq2)
library(kableExtra)
eRare2<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps))*2)
}
eRare1<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps)))
}
eRare.8<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.8))
}
eRare.6<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.6))
}
eRare2<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps))*2)
}
eRare1<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps)))
}
eRare.8<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.8))
}
eRare.6<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.6))
}
method.eRare<-c("eRare2", "eRare1", "eRare.8", "eRare.6")
eRare.model.structure1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=53, groupN=1, singleN=1, D=500, V=250, method.eRare))
eRare.model.structure2<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=35, groupN=15, singleN=5, D=500, V=250, method.eRare))
eRare.model.structure3<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=250, method.eRare))
eRare.model.structure4<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=10, groupN=30, singleN=15, D=500, V=250, method.eRare))
eRare.model.depth1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=200, V=100, method.eRare))
eRare.model.depth2<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=250, method.eRare))
eRare.model.depth2<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=250, method.eRare))
eRare.model.depth3<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=1000, V=500, method.eRare))
eRare.model.depth4<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=2000, V=1000, method.eRare))
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
?ulimit
sessionInfo()
gc()
?gc
gc(full=T)
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
#now install ####
devtools::install_github("djeppschmidt/Model.Microbiome")
# load required packages ####
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
library(car)
library(DESeq2)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("djeppschmidt/Model.Microbiome")
library(Model.Microbiome)
library(reshape2)
library(ggplot2)
library(vegan)
library(dplyr)
library(plyr)
library(phyloseq)
library(viridis)
library(ranacapa)
library(edgeR)
library(limma)
library(GLDEX)
library(stats)
library(igraph)
library(car)
library(DESeq2)
library(kableExtra)
eRare2<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps))*2)
}
eRare1<-function(ps){
out<-make.rarefy2(ps, min(sample_sums(ps)))
}
eRare.8<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.8))
}
eRare.6<-function(ps){
out<-make.rarefy2(ps, round(min(sample_sums(ps))*0.6))
}
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
method.eRare<-c("eRare2", "eRare1", "eRare.8", "eRare.6")
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
getwd()
setwd("/Users/maullabmacbookpro/Documents/GitHub/Model.Microbiome")
document()
devtools::document()
library(devtools)
document()
library(roxygen2)
document()
setwd("/Users/maullabmacbookpro/Documents/GitHub/Model.Microbiome")
library(devtools)
library(roxygen2)
document()
devtools::install_github("djeppschmidt/Model.Microbiome")
library(Model.Microbiome)
eRare.model.V1<-suppressWarnings(BENCHMARK.MM(reps=10, commonN=20, groupN=20, singleN=15, D=500, V=100, method.eRare))
